name: artefact-push
description: Push artefacts to JFROG, S3, and ECR repositories using ORAS CLI
branding:
  icon: upload
  color: green
inputs:
  to:
    description: |
      Destination URI where the artefact will be pushed.
      docker:// => docker push
      helm:// => helm push
      jfrog:// => curl - push to jfrog file artefactory
      oci:// => oras push
      s3:// => aws s3 cp
    required: true
  provider:
    description: |
      Service to push artefacts to
      - aws =>
      - jfrog =>
      - minio =>
  artefact:
    description: "Path to the artefact to be pushed."
    required: true
  build:
    description: "Whether to also build the artefact"
    required: false
  version:
    description: "Version of the artefact to be pushed."
    required: true
  username:
    description: "Username for the service authentication."
    required: false
  password:
    description: "Password/token for the service authentication."
    required: false
  options:
    description: "Additional options as a JSON object"
    required: false
runs:
  using: "composite"
  steps:
    - name: Detect Values
      id: detect-values
      shell: bash
      run: |
        destination=${{ inputs.to }}
        destination=${destination,,}

        # Check if 'to' starts with a supported scheme
        schemes=(
          "docker"
          "jfrog"
          "helm"
          "oci"
          "s3"
        )
        found=0
        for scheme in "${schemes[@]}"; do
          if [[ "$destination" == "$scheme://"* ]]; then
            found=1
            break
          fi
        done
        if [[ $found -ne 1 ]]; then
          schemes_string=""
          for s in "${schemes[@]}"; do schemes_string="$schemes_string $s://"; done
          echo "Invalid scheme. Scheme must be one of$schemes_string"
        fi

        # Extract scheme from the lowercased destination
        scheme=$(echo "$destination" | awk -F:// '{print $1}')
        # Pass scheme further
        echo "scheme=${scheme}"
        echo "scheme=${scheme}" >> $GITHUB_OUTPUT

        # Adapt ECR destination
        destination=${destination/$scheme:\/\//}
        # Pass destination further
        echo "destination=${destination}"
        echo "destination=${destination}" >> $GITHUB_OUTPUT

    #
    # Handling AWS Session
    #

    - name: Handling AWS Credentials
      id: aws-credentials
      shell: bash
      run: |
        options='${{ inputs.options != '' && inputs.options  || '{}' }}'
        if [[ -n "$options" ]]; then
          aws_credentials=$(echo "$options" | jq -r '.aws_credentials  // {}' | jq -c '.')
          if [[ "$aws_credentials" != "{}" ]]; then
            if [[ -n "${{ env.DEBUG }}" ]]; then
              echo "aws_credentials=$aws_credentials"
            fi
            echo "aws_credentials=$aws_credentials" >> $GITHUB_OUTPUT

            # Dynamically create environment variables for each key in the JSON
            # until GitHub decides to provide a better .with data pass
            for key in $(echo "$aws_credentials" | jq -r 'keys[]'); do
              value=$(echo "$aws_credentials" | jq -r ".${key}")
              echo "AWS_${key^^}=$value" >> $GITHUB_ENV
            done
          fi
        fi

    - name: Configure AWS Credentials
      if: ${{ steps.aws-credentials.outputs.aws_credentials }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESSKEYID }}
        aws-secret-access-key: ${{ env.AWS_SECRETACCESSKEY }}
        aws-session-token: ${{ env.AWS_SESSIONTOKEN }}
        region: ${{ env.AWS_REGION }}
    # - name: Configure AWS Credentials
    #   if: ${{ steps.aws-credentials.outputs.aws_credentials }}
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with: ${{ fromJSON(steps.aws-credentials.outputs.aws_credentials) }}

    #
    # Handling Docker
    # https://github.com/docker/login-action
    # https://github.com/docker/build-push-action
    #

    - name: Ensure Docker's Presence
      if: ${{ steps.detect-values.outputs.scheme == 'docker' }}
      uses: dragoscirjan/github-tools/.github/actions/docker-setup@main

    - name: Login to Docker Registry (inputs)
      if: ${{ steps.detect-values.outputs.scheme == 'docker' && inputs.username && inputs.password }}
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.detect-values.outputs.destination }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Override docker/login-action@v3 arguments
      id: docker-credentials
      if: ${{ steps.detect-values.outputs.scheme == 'docker' }}
      shell: bash
      run: |
        options='${{ inputs.options != '' && inputs.options  || '{}' }}'
        if [ -n "$options" ]; then
          docker_credentials=$(echo "$options" | jq '.docker_credentials  // {}' | jq -c '.')
          if [[ "$docker_credentials" != "{}"  ]]; then
            if [[ -n "${{env.DEBUG}}" ]]; then
              echo "docker_credentials=$docker_credentials"
            fi
            echo "docker_credentials=$docker_credentials" >> $GITHUB_OUTPUT

            # Dynamically create environment variables for each key in the JSON
            # until GitHub decides to provide a better .with data pass
            for key in $(echo "$docker_credentials" | jq -r 'keys[]'); do
              value=$(echo "$docker_credentials" | jq -r ".${key}")
              echo "DOCKER_${key^^}=$value" >> $GITHUB_ENV
            done
          fi
        fi

    - name: Login to Docker Registry (options.docker_credentials)
      if: ${{ steps.detect-values.outputs.scheme == 'docker' && steps.docker-credentials.outputs.docker_credentials }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
    # - name: Login to Docker Registry (options.docker_credentials)
    #   if: ${{ steps.detect-values.outputs.scheme == 'docker' && steps.docker-credentials.output.docker_credentials }}
    #   uses: docker/login-action@v3
    #   with: ${{ fromJSON(steps.docker-credentials.outputs.docker_credentials) }}

    - name: Docker Build Options
      id: docker-build
      if: ${{ steps.detect-values.outputs.scheme == 'docker' }}
      shell: bash
      run: |
        options='${{ inputs.options != '' && inputs.options  || '{}' }}'
        if [ -n "$options" ]; then
          docker_build=$(echo "$options" | jq '.docker_build  // {}' | jq -c '.')
          docker_build=$(echo "$docker_build" | jq --arg tags "${{ inputs.version }}" '.push = false | .tags = $tags' | jq -c '.')

          if [[ -n "${{env.DEBUG}}" ]]; then
            echo "docker_build=$docker_build"
          fi
          echo "docker_build=$docker_build" >> $GITHUB_OUTPUT

          # Dynamically create environment variables for each key in the JSON
          # until GitHub decides to provide a better .with data pass
          for key in $(echo "$docker_build" | jq -r 'keys[]'); do
            value=$(echo "$docker_build" | jq -r ".${key}")
            if [[ "$value" != "null" ]]; then
              # if [[ "$key" == "tags" ]]; then
              #   # Special case for arrays, flatten into comma-separated string
              #   value=$(echo "$docker_build" | jq -r ".${key} | join(\",\")")
              # fi
              echo "DOCKER_${key^^}=$value" >> $GITHUB_ENV
            fi
          done
        fi

    # TODO: untested so far ...
    - name: Build & Push to Docker Registry
      if: ${{ steps.detect-values.outputs.scheme == 'docker' && inputs.build }}
      uses: docker/build-push-action@v6
      with:
        context: ${{ env.DOCKER_CONTEXT }}
        file: ${{ env.DOCKER_FILE }}
        tags: ${{ env.DOCKER_TAGS }}
        push: ${{ env.DOCKER_PUSH }}
        platforms: ${{ env.DOCKER_PLATFORMS }}
    # - name: Build & Push to Docker Registry
    #   if: ${{ steps.detect-values.outputs.scheme == 'docker' && inputs.build }}
    #   uses: docker/build-push-action@v6
    #   with: ${{ fromJSON(steps.docker-build.outputs.docker_build) }}

    - name: Push to Docker Registry
      if: ${{ steps.detect-values.outputs.scheme == 'docker' && ! inputs.build }}
      shell: bash
      run: |
        IFS=',' read -r -a tag_array <<< "${{ inputs.version }}"
        for tag in "${tag_array[@]}"; do
          docker push ${{ steps.detect-values.outputs.destination }}/${{ inputs.artefact }}:$tag
        done

    #
    # Handling Helm
    # https://github.com/marketplace/actions/helm-push
    # TODO: integrate with non oci repositories; so far OCI is good enough
    #

    - name: Ensure Helm's Presence
      if: ${{ steps.detect-values.outputs.scheme == 'helm' }}
      uses: dragoscirjan/github-tools/.github/actions/helm-setup@main

    - name: Helm Authentication Required
      if: ${{ steps.detect-values.outputs.scheme == 'helm' && ( ! inputs.username || ! inputs.password ) }}
      shell: bash
      run: |
        echo "Helm authentication required"
        exit 1

    - name: Package Helm Chart
      if: ${{ steps.detect-values.outputs.scheme == 'helm' && inputs.build }}
      shell: bash
      run: |
        helm package ${{ inputs.artefact }} --version ${{ inputs.version }}

    - name: Helm Push to OCI
      if: ${{ steps.detect-values.outputs.scheme == 'helm' && startsWith(steps.detect-values.outputs.destination, 'oci://') }}
      shell: bash
      run: |
        registry="${{ steps.detect-values.outputs.destination }}"
        registry_host=${registry#oci://}
        registry_host=${registry_host%%/*}

        helm registry login $registry_host \
          --username ${{ inputs.username }} \
          --password ${{ inputs.password }}

        chart_package=$(ls ${{ inputs.artefact }}*.tgz)
        echo "Chart Package: $chart_package"
        helm push $chart_package $registry

    # TODO: must debug
    # even though commands appear to be correct and are working localy, with github test workflow, push fails
    - name: Helm Push to HTTP Repository
      if: ${{ steps.detect-values.outputs.scheme == 'helm' && startsWith(steps.detect-values.outputs.destination, 'http') }}
      shell: bash
      run: |
        helm repo add ${{ inputs.artefact }} ${{ steps.detect-values.outputs.destination }} --username ${{ inputs.username }} --password ${{ inputs.password }}

        chart_package=$(ls ${{ inputs.artefact }}*.tgz)
        echo "Chart Package: $chart_package"
        helm cm-push $chart_package ${{ inputs.artefact }} --force

    #
    # Handling JFroG Generic Repositories
    # https://jfrog.com/help/r/jfrog-artifactory-documentation/generic-repositories
    #

    - name: Push artefact (jfrog)
      if: ${{ steps.detect-values.outputs.scheme == 'jfrog' }}
      env:
        ORAS_EXPERIMENTAL: "true"
      shell: bash
      run: |
        artefact_path="${{ inputs.artefact }}"
        artefact_name=$(basename "$artefact_path")

        checksum_path="$artefact_path.sha256"
        checksum_name=$(basename "$checksum_path")
        sha256sum "$artefact_path" | awk '{print $1}' > $checksum_path

        echo "Uploading artefact: $artefact_name"
        curl -SL -u "${{ inputs.username }}:${{ inputs.password }}" \
          -T "$artefact_path" \
          "https://${{ steps.detect-values.outputs.destination }}/${{ inputs.version }}/$artefact_name"

        echo "Uploading checksum: $checksum_name"
        curl -SL -u "${{ inputs.username }}:${{ inputs.password }}" \
          -T "$checksum_path" \
          "https://${{ steps.detect-values.outputs.destination }}/${{ inputs.version }}/$checksum_name"
    #
    # Handling OCI
    # https://opencontainers.org/
    # https://oras.land/
    #

    - name: Ensure Oras's Presence
      if: ${{ steps.detect-values.outputs.scheme == 'oci' }}
      uses: dragoscirjan/github-tools/.github/actions/oras-setup@main

    - name: Handling Oras's Arguments
      id: oras-args
      shell: bash
      run: |
        options='${{ inputs.options != '' && inputs.options  || '{}' }}'
        if [[ -n "$options" ]]; then
          oras_args=$(echo "$options" | jq -r '.oras_args // null' | jq -c '.')
          if [[ "$oras_args" != "null" ]]; then
            echo "oras_args=$oras_args" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Oras Authenticate (oci)
      if: ${{ steps.detect-values.outputs.scheme == 'oci' && ! startsWith(steps.detect-values.outputs.destination, 'ecr://') }}
      env:
        ORAS_EXPERIMENTAL: "true"
      shell: bash
      run: |
        registry="${{ steps.detect-values.outputs.destination }}"
        registry_host=${registry%%/*}

        oras login $registry_host \
          --username ${{ matrix.username }} \
          --password ${{ matrix.password }}

    - name: Push artefact (oci)
      if: ${{ steps.detect-values.outputs.scheme == 'oci' }}
      env:
        ORAS_EXPERIMENTAL: "true"
      shell: bash
      run: |
        oras push ${{ steps.detect-values.outputs.destination }}:${{ inputs.version }} ${{ steps.oras-args.outputs.oras_args || '' }} "${{ inputs.artefact }}"

    #
    # Handle S3
    #

    - name: Ensure AWS Client's Presence
      if: ${{ steps.detect-values.outputs.scheme == 's3' }}
      uses: dragoscirjan/github-tools/.github/actions/awscli-setup@main

    - name: Handling AWS Cli's Arguments
      id: aws-args
      shell: bash
      run: |
        options='${{ inputs.options != '' && inputs.options  || '{}' }}'
        if [[ -n "$options" ]]; then
          aws_args=$(echo "$options" | jq -r '.awscli_args // null')
          if [[ "$aws_args" != "null" ]]; then
            echo "aws_args=$aws_args" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Push artefact (s3)
      if: ${{ steps.detect-values.outputs.scheme == 's3' }}
      shell: bash
      run: |
        artefact_path="${{ inputs.artefact }}"
        artefact_name=$(basename "$artefact_path")

        aws s3 cp "$artefact_path" \
          "s3://${{ steps.detect-values.outputs.destination }}/${{ inputs.version }}/$artefact_name" \
          ${{ steps.aws-args.outputs.aws_args || '' }}
